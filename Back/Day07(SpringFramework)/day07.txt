Day07(25.5.28)



1. SpringFramework
    - SpringFramework 압축폴더 다운 -> springFramework > sts3.9.17 > sts-bundle > sts-3.9.17.RELEASE > STS.ini에서 경로 수정
    > STS실행 > workspace > springFramework > workSpace선택 > Spring Legacy Project > 목록에 Spring MVC Project 뜨면 OK

    - Maven Project > myapp 생성 > pom.xml에서 의존성 주입(저장소 등록)

    - dependency : 해당 프로젝트에서 의존하는 다른 라이브러리 정보를 기술
        - dependency 아래에 의존성 주입

    - 저장소 등록 
        https://mvnrepository.com/artifact/com.oracle.database.jdbc/ojdbc11/23.3.0.23.09 
        https://mvnrepository.com/artifact/org.projectlombok/lombok/1.18.30  
        https://mvnrepository.com/artifact/org.springframework/spring-context 
        https://mvnrepository.com/artifact/org.springframework/spring-jdbc

    - 프로젝트 > src/main/resource 폴더 생성




    - IOD, DI 
        - 제어역행(IOC Inversion of Control)
            - Spring Injection 
           workSpace\myapp\src\main\java\com\shinhan\myapp\section03\*
           workSpace\myapp\src\main\resource\section03.xml

            (List 또는 배열)
            workSpace\myapp\src\main\java\com\shinhan\myapp\section03\License.java
            section03\Person.java 
                > List<String> majorList;
                > List<License> licenceList; 
            section03.xml에서 person3에 추가         

            (Map)
           workSpace\myapp\src\main\java\com\shinhan\myapp\section03\Book.java
            section03\Person.java > 추가
            section03.xml에서 person3에 추가  

            (Set, Properties)
            section03\Person.java > 추가
            section03.xml에서 person3에 추가  

        - 의존성 주입(DI Dependency Injection)
            - 의존관계 자동설정
                workSpace\myapp\src\main\resource\section04.xml
                workSpace\myapp\src\main\java\com\shinhan\myapp\section04\App.java
                workSpace\myapp\src\main\java\com\shinhan\myapp\section04\Person.java

    - Annotation 기반 설정
        - xml 설정을 대신

            - @Autowired : 의존성 자동 주입을 위해 사용. Spring이 자동으로 Bean을 찾아 주입.
            - @Component : 개발자가 정의한 클래스를 Spring이 관리하는 Bean으로 등록.
            - @Service : 비즈니스 로직을 처리하는 서비스 클래스에 사용.
            - @Repository : 데이터 액세스 계층을 나타내며, 데이터베이스 작업을 처리하는 클래스에 사용.
            - @Controller : 웹 요청을 처리하는 컨트롤러 클래스에 사용.
            - @RestController : @Controller와 @ResponseBody를 결합한 것으로, RESTful 웹 서비스를 쉽게 구현.
            - @Configuration : Spring 설정 클래스를 정의할 때 사용.
            - @Bean : @Configuration 클래스에서 Bean을 정의할 때 사용.
            - @RequestMapping : 특정 URL을 처리하는 메서드에 매핑.
            - @PathVariable : URL 경로에서 값을 추출할 때 사용.
            - @RequestParam : 요청 파라미터를 메서드 매개변수에 바인딩.
            - @Transactional : 트랜잭션 관리를 위해 사용.
            
            - @PersistenceContext : EntityManager를 주입받아 JPA를 통해 데이터베이스 작업을 수행할 때 사용.
            - @Entity : JPA에서 데이터베이스 테이블과 매핑되는 클래스에 사용.
            - @Table : 데이터베이스 테이블 이름을 지정할 때 사용.
            - @Id : 엔티티 클래스에서 기본 키를 나타낼 때 사용.
            - @GeneratedValue : 기본 키 생성 전략을 지정할 때 사용.
            - @Column : 데이터베이스 컬럼과 매핑되는 필드에 사용.
            - @OneToOne, @OneToMany, @ManyToOne, @ManyToMany : 엔티티 간의 관계를 정의할 때 사용.
            - @JoinColumn : 외래 키를 매핑할 때 사용.
            - @Query : JPQL 또는 네이티브 SQL 쿼리를 정의할 때 사용.

    - Spring Database연동
       - pom.xml > dependency 아래에 의존성 주입

       resource\oraclejdbc.xml
       myapp\model\DeptDAO.java
       myapp\src\main\java\com\shinhan\myapp\model\DeptService.java
       myapp\oraclejdbc\App.java
       myapp\model\emp\EmpDAO.java
       myapp\model\emp\EmpService.java

       -Bean을 사용하는 방법
        1. XML설정파일에 <bean> 정의한다.    
                ->  외부의 class등록시 유용
        2. JavaConfiguration파일을 만든다.  ->  @Configuration 
                ->  내부의 설정파일 필요한 경우
        3. Annotation을 이용한다.           
                ->    내부의 객체를 빈으로 만들때 유용
                - <bean>와 같은 의미는 @Bean, @Component, @Service, @Repository, @Controller

