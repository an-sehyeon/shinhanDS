Day13(25.6.9)



1. 보조업무
    - log남기기, 소요시간 측정
    - 주업무에 포인트 컷 남기기

2. TEST
    1. 단위 테스트
        - Junit 사용법
            Java용 단위테스트 프레임워크로 테스트 케이스를 작성하고 실행하는데 사용
            @Test 어노테이션 : 테스트 메서드로 지정함을 의미
            Assertions : assertEquals, assertTrue, assertFalse 등을 사용하여 예상 결과와 실제 결과 비교
            Mockito를 사용한 Mock 객체 생성 : 단위 테스트를 보다 효율적으로 작성할수 있게 해주며, 외부 의존성을 모의하여 테스트 가능

        - 단위 테스트 시나리오 작성
            1) 테스트 대상 메서드의 입력값과 예상 결과 정의
            2) Mock 객체를 생성하여 외부 의존성을 모의
            3) 테스트 메서드 작성 및 @Test 어노테이션 추가
            4) Assertions를 사용하여 예상 결과와 실제 결과 비교
            5) 테스트 실행 및 결과 확인

            - springLegacyProject\pom.xml > 의존성 추가
                <!-- Mockito + JUnit5 연동: MockitoExtension 포함 -->
                <dependency>
                    <groupId>org.mockito</groupId>
                    <artifactId>mockito-junit-jupiter</artifactId>
                    <version>5.2.0</version>
                    <scope>test</scope>
                </dependency>
                <!-- Spring Test -->
                <dependency>
                    <groupId>org.springframework</groupId>
                    <artifactId>spring-test</artifactId>
                    <version>5.3.30</version>
                    <scope>test</scope>
                </dependency>
                <!-- JUnit5 -->
                <dependency>
                    <groupId>org.junit.jupiter</groupId>
                    <artifactId>junit-jupiter-api</artifactId>
                    <version>5.10.0</version>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>org.junit.jupiter</groupId>
                    <artifactId>junit-jupiter-engine</artifactId>
                    <version>5.10.0</version>
                    <scope>test</scope>
                </dependency>
                <!-- Mockito -->
                <dependency>
                    <groupId>org.mockito</groupId>
                    <artifactId>mockito-core</artifactId>
                    <version>5.12.0</version>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>org.mockito</groupId>
                    <artifactId>mockito-junit-jupiter</artifactId>
                    <version>5.12.0</version>
                    <scope>test</scope>
                </dependency>    

            - src\test\java\com\shinhan\spring\section1\Test1_LifeCycle.java
            - main\java\net\firstzone\app\Calculator.java
            - src\test\java\com\shinhan\spring\section1\Test2_Basic.java
            - src\test\java\com\shinhan\spring\section1\Test3_ADD.java
                > 예외발생, 시간제약 test
            
                
                LifeCycle
                    - static : @BeforeAll, @AfterAll > 한번만 수행
                    - @BeforeEach, @AfterEach > @Test마다 수행    
                    - @TestInstance(Lifecycle.PER_CLASS) >  static 생략가능

        - Mockito 사용 테스트
            - net\firstzone\app\EmpRepositoryInterface.java
            - net\firstzone\app\EmpServiceMockito.java

    2. 통합 테스트
        - 개별 모듈이 합쳐져서 하나의 시스템으로 통합될 때, 이들이 함께 올바르게 작동하는지를 확인하는 테스트
        - 모듈 간의 인터페이스와 상호작용이 올바른지 검증 가능
        - 전체 시스템의 안정성을 확보할 수 있다.
        - SpringBootTest 어노테이션 : 통합 테스트 클래스에 사용하여 Spring 컨텍스트를 로드


            - src\test\java\com\shinhan\spring\section2\EmpServiceTestIntegration.java
      
        - mvc 통합 테스트 
            - src\test\java\com\shinhan\spring\section2\EmpControllerTest.java
        
    3. 성능 테스트
        - 애플리케이션이 실제 사용 환경에서 어떻게 동작하는지, 얼마나 효율적으로 작동하는지를 평가하는 테스트
            - 성능 테스트 도구: JMeter, Gatling, LoadRunner 등
            - 주요 지표: 응답 시간, 처리량, 자원 사용률
            - 테스트 시나리오 작성 및 실행
                1) 테스트 목표 정의
                2) 테스트 환경 설정
                3) 테스트 스크립트 작성
                4) 테스트 실행 및 결과 분석

        https://jmeter.apache.org/download_jmeter.cgi > apache-jmeter-5.6.3.zip 다운로드 > 압축해제
        > 실행파일(jmeter.bat 또는 jmeter.sh)로 Jmeter GUI 실행

        JMeter 용어
            - Thread Group : 테스트에 사용될 쓰레드 개수, 쓰레드 1개당 사용자 1명
            - Sampler : 사용자의 액션 (예: 로그인, 게시물 작성, 게시물 조회 등)
            - Listener : 응답을 받아 리포팅, 검증, 그래프 등 다양한 처리
            - Configuration : Sampler 또는 Listener가 사용할 수 있는 설정 요소 (예: HTTP 요청 설정, 데이터베이스 연결 설정 등)
            - Assertion : 응답 확인 방법(응답 코드)
